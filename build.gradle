plugins {
	id 'org.springframework.boot' version '2.6.4'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
}

group = 'io.quind'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

repositories {
	mavenCentral()
}

dependencies {
	//https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-mongodb
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: '2.5.5'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'io.projectreactor:reactor-test'

	// https://mvnrepository.com/artifact/org.modelmapper/modelmapper
	implementation group: 'org.modelmapper', name: 'modelmapper', version: '1.0.0'

	/*implementation 'org.springframework.boot:spring-boot-starter-data-mongodb-reactive'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
	testImplementation 'io.projectreactor:reactor-test'*/








	implementation 'org.springframework.boot:spring-boot-starter-amqp'



}

jar {
	manifest{
		attributes(
				'Main-Class': 'io.quind.testmongo.TestConexionMongoApplication',
		)
	}
}


task fatJar(type: Jar) {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	manifest.from jar.manifest
	classifier = 'all'
	from {

		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	} {
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
	}
	with jar
}
artifacts {
	archives fatJar
}

tasks.named('test') {
	useJUnitPlatform()
}
targetCompatibility = JavaVersion.VERSION_1_8
